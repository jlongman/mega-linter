Example
=======

   >>> import io
   >>> import itertools
   >>> from megalinter.reporters.bb.line_parser.tflint import Parser
   >>> in_messages = ("""4 issue(s) found:\n\n                       Warning: Interpolation-only expressions are deprecated in Terraform v0.12.14 (terraform_deprecated_interpolation)\n\n                         on /tmp/lint/prod/07_route53/zones/mvcrushclub.com/outputs.tf line 3:\n                          3:   value       = "${module.route53_zone.private_zone_id}"\n\n                       Reference: https://github.com/terraform-linters/tflint/blob/v0.22.0/docs/rules/terraform_deprecated_interpolation.md""")

4 issue(s) found:

Warning: Interpolation-only expressions are deprecated in Terraform v0.12.14 (terraform_deprecated_interpolation)

  on /tmp/lint/prod/07_route53/zones/mvcrushclub.com/outputs.tf line 3:
   3:   value       = "${module.route53_zone.private_zone_id}"

Reference: https://github.com/terraform-linters/tflint/blob/v0.22.0/docs/rules/terraform_deprecated_interpolation.md


Now test it:

   >>> Parser("a", "b", "c").parse(in_messages)
   [{'parser': 'a', 'file_type': 'b', 'file': 'c', 'line': 3, 'level': 'MEDIUM', 'severity': 'MEDIUM', 'message': 'Interpolation-only expressions are deprecated in Terraform v0.12.14 (terraform_deprecated_interpolation)\n  value       = "${module.route53_zone.private_zone_id}"', 'link': 'https://github.com/terraform-linters/tflint/blob/v0.22.0/docs/rules/terraform_deprecated_interpolation.md'}]



Let's test the Regular Expressions

ISSUES FOUND

     >>> print(Parser.ISSUES_FOUND.match('4 issue(s) found:') is not None )
     True
     >>> print(Parser.ISSUES_FOUND.match('4000 issue(s) found:') is not None )
     True
     >>> print(Parser.ISSUES_FOUND.match('www') is not None)
     False
     >>> print(Parser.ISSUES_FOUND.match('Warning: a message') is not None)
     False
     >>> print(Parser.ISSUES_FOUND.match('Error: a message') is not None)
     False
     >>> print(Parser.ISSUES_FOUND.match('Notice: a message') is not None)
     False


LEVEL_PLUS_MESSAGE

     >>> print(Parser.LEVEL_PLUS_MESSAGE.match('Warning: a message') is not None)
     True
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match('Error: a message') is not None)
     True
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match('Notice: a message') is not None)
     True

     >>> print(Parser.LEVEL_PLUS_MESSAGE.match(r'Error: "" does not match valid pattern ^(\x{002F})|(\x{002F}[\x{0021}-\x{007F}]+\x{002F})$ (aws_iam_group_invalid_path)') is not None)
     True

     >>> print(Parser.LEVEL_PLUS_MESSAGE.match('Warning a message') is not None)
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match('Error a message') is not None)
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match('Notice a message') is not None)
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match(':Warning a message') is not None)
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match(':Error a message') is not None)
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match(':Notice a message') is not None)
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match(':Warning: a message') is not None)
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match(':Error: a message') is not None)
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match(':Notice: a message') is not None)
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match('4 issue(s) found:') is not None )
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match('www:') is not None)
     False
     >>> print(Parser.LEVEL_PLUS_MESSAGE.match('www: a message') is not None)
     False
    >>> print(Parser.LEVEL_PLUS_MESSAGE.match('on /file/ line 3:') is not None)
    False
    >>> print(Parser.LEVEL_PLUS_MESSAGE.match('on /file line 3:') is not None)
    False
    >>> print(Parser.LEVEL_PLUS_MESSAGE.match('on file line 3:') is not None)
    False
    >>> print(Parser.LEVEL_PLUS_MESSAGE.match('on file line 9999999:') is not None)
    False
    >>> print(Parser.LEVEL_PLUS_MESSAGE.match('on /tmp/file/ line 9999999:') is not None)
    False
    >>> print(Parser.LEVEL_PLUS_MESSAGE.match('on /tmp/file line 9999999:') is not None)
    False
    >>> print(Parser.LEVEL_PLUS_MESSAGE.match('on /tmp/file line -1:') is not None)
    False

ON_FILE_LINE

    >>> print(Parser.ON_FILE_LINE.match('on /file/ line 3:') is not None)
    True
    >>> print(Parser.ON_FILE_LINE.match('on /file line 3:') is not None)
    True
    >>> print(Parser.ON_FILE_LINE.match('on file line 3:') is not None)
    True
    >>> print(Parser.ON_FILE_LINE.match('on file line 9999999:') is not None)
    True
    >>> print(Parser.ON_FILE_LINE.match('on /tmp/file/ line 9999999:') is not None)
    True
    >>> print(Parser.ON_FILE_LINE.match('on /tmp/file line 9999999:') is not None)
    True
    >>> print(Parser.ON_FILE_LINE.match('on /tmp/file line -1:') is not None)
    False

    >>> print(Parser.ON_FILE_LINE.match('Warning: a message') is not None)
    False
    >>> print(Parser.ON_FILE_LINE.match('Error: a message') is not None)
    False
    >>> print(Parser.ON_FILE_LINE.match('Notice: a message') is not None)
    False


     >>> print(Parser.ON_FILE_LINE.match('4 issue(s) found:') is not None )
     False
     >>> print(Parser.ON_FILE_LINE.match('4000 issue(s) found:') is not None )
     False
     >>> print(Parser.ON_FILE_LINE.match('www') is not None)
     False



REFERENCE_PLUS_LINK



    >>> print(Parser.REFERENCE_PLUS_LINK.match('Reference: https://github.com/terraform-linters/tflint/') is not None)
    True
    >>> print(Parser.REFERENCE_PLUS_LINK.match('Reference: https://github.com/terraform-linters/tflint/blob/v0.22.0/docs/rules/terraform_deprecated_interpolation.md') is not None)
    True
    >>> print(Parser.REFERENCE_PLUS_LINK.match('Reference: https://github.com/terraform-linters/tflint/') is not None)
    True



    >>> print(Parser.REFERENCE_PLUS_LINK.match('Reference: a message') is not None)
    False
    >>> print(Parser.REFERENCE_PLUS_LINK.match('Reference: a message') is not None)
    False
    >>> print(Parser.REFERENCE_PLUS_LINK.match('Reference: a message') is not None)
    False

    >>> print(Parser.REFERENCE_PLUS_LINK.match('Reference: https://bitbucket.org') is not None)
    False
    >>> print(Parser.REFERENCE_PLUS_LINK.match('Reference: https://bitbucket.org/') is not None)
    False
    >>> print(Parser.REFERENCE_PLUS_LINK.match('Reference: https://bitbucket.org/github.com') is not None)
    False

    >>> print(Parser.REFERENCE_PLUS_LINK.match('Warning: a message') is not None)
    False
    >>> print(Parser.REFERENCE_PLUS_LINK.match('Error: a message') is not None)
    False
    >>> print(Parser.REFERENCE_PLUS_LINK.match('Notice: a message') is not None)
    False


     >>> print(Parser.REFERENCE_PLUS_LINK.match('4 issue(s) found:') is not None )
     False
     >>> print(Parser.REFERENCE_PLUS_LINK.match('4000 issue(s) found:') is not None )
     False
     >>> print(Parser.REFERENCE_PLUS_LINK.match('www') is not None)
     False

     >>> print(Parser.REFERENCE_PLUS_LINK.match('4 issue(s) found:') is not None )
     False
     >>> print(Parser.REFERENCE_PLUS_LINK.match('4000 issue(s) found:') is not None )
     False
